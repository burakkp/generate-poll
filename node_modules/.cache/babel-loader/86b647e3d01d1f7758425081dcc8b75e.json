{"ast":null,"code":"var _jsxFileName = \"/home/burakkp/Documents/Projects/assessments/capgemini/fe-assignment/src/components/resultComponent/result.js\";\nimport React, { useEffect } from 'react';\nimport Highcharts from 'highcharts';\nimport './result.scss';\nimport { useQuestions } from '../questionsComponent/questions';\n\nfunction Result() {\n  const {\n    votes\n  } = useQuestions();\n  const count = {};\n  votes.forEach(function (i) {\n    count[i] = (count[i] || 0) + 1;\n  });\n  let xAxis = Object.keys(count),\n      yAxis = Object.values(count),\n      seperatedVotes = [yAxis];\n  console.log(Object.keys(count), Object.values(count)); // const config = {\n  //     chart: {\n  //         type: 'column',\n  //         width: 500,\n  //         height:500\n  //     },\n  //     title: {\n  //         text: 'Vote Results'\n  //     },\n  //     xAxis: {\n  //         categories: xAxis\n  //     },\n  //     legend:{\n  //         enabled:false\n  //     },\n  //     series: seperatedVotes\n  // };\n\n  useEffect(() => {});\n  Highcharts.chart('container', {\n    chart: {\n      type: 'column',\n      width: 500,\n      height: 500\n    },\n    title: {\n      text: 'Monthly Average Rainfall'\n    },\n    subtitle: {\n      text: 'Source: WorldClimate.com'\n    },\n    xAxis: {\n      categories: xAxis,\n      crosshair: true\n    },\n    yAxis: {\n      min: 0,\n      title: {\n        text: 'Rainfall (mm)'\n      }\n    },\n    plotOptions: {\n      column: {\n        pointPadding: 0.2,\n        borderWidth: 0\n      }\n    },\n    series: [{\n      data: seperatedVotes\n    }]\n  });\n  console.log('asd', seperatedVotes); //console.log(config)\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"result-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default Result;","map":{"version":3,"sources":["/home/burakkp/Documents/Projects/assessments/capgemini/fe-assignment/src/components/resultComponent/result.js"],"names":["React","useEffect","Highcharts","useQuestions","Result","votes","count","forEach","i","xAxis","Object","keys","yAxis","values","seperatedVotes","console","log","chart","type","width","height","title","text","subtitle","categories","crosshair","min","plotOptions","column","pointPadding","borderWidth","series","data"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAO,eAAP;AACA,SAASC,YAAT,QAA6B,iCAA7B;;AAEA,SAASC,MAAT,GAAkB;AAEd,QAAM;AAAEC,IAAAA;AAAF,MAAYF,YAAY,EAA9B;AAIA,QAAMG,KAAK,GAAG,EAAd;AACAD,EAAAA,KAAK,CAACE,OAAN,CAAc,UAASC,CAAT,EAAY;AAAEF,IAAAA,KAAK,CAACE,CAAD,CAAL,GAAW,CAACF,KAAK,CAACE,CAAD,CAAL,IAAU,CAAX,IAAgB,CAA3B;AAA8B,GAA1D;AAEA,MAAIC,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYL,KAAZ,CAAZ;AAAA,MACIM,KAAK,GAAGF,MAAM,CAACG,MAAP,CAAcP,KAAd,CADZ;AAAA,MAEIQ,cAAc,GAAG,CAACF,KAAD,CAFrB;AAIAG,EAAAA,OAAO,CAACC,GAAR,CAAYN,MAAM,CAACC,IAAP,CAAYL,KAAZ,CAAZ,EAA+BI,MAAM,CAACG,MAAP,CAAcP,KAAd,CAA/B,EAbc,CAgBd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAL,EAAAA,SAAS,CAAC,MAAM,CAEf,CAFQ,CAAT;AAGAC,EAAAA,UAAU,CAACe,KAAX,CAAiB,WAAjB,EAA8B;AAC1BA,IAAAA,KAAK,EAAE;AACHC,MAAAA,IAAI,EAAE,QADH;AAEHC,MAAAA,KAAK,EAAE,GAFJ;AAGHC,MAAAA,MAAM,EAAE;AAHL,KADmB;AAM1BC,IAAAA,KAAK,EAAE;AACHC,MAAAA,IAAI,EAAE;AADH,KANmB;AAS1BC,IAAAA,QAAQ,EAAE;AACND,MAAAA,IAAI,EAAE;AADA,KATgB;AAY1Bb,IAAAA,KAAK,EAAE;AACHe,MAAAA,UAAU,EAAEf,KADT;AAEHgB,MAAAA,SAAS,EAAE;AAFR,KAZmB;AAgB1Bb,IAAAA,KAAK,EAAE;AACHc,MAAAA,GAAG,EAAE,CADF;AAEHL,MAAAA,KAAK,EAAE;AACHC,QAAAA,IAAI,EAAE;AADH;AAFJ,KAhBmB;AAsB1BK,IAAAA,WAAW,EAAE;AACTC,MAAAA,MAAM,EAAE;AACJC,QAAAA,YAAY,EAAE,GADV;AAEJC,QAAAA,WAAW,EAAE;AAFT;AADC,KAtBa;AA4B1BC,IAAAA,MAAM,EAAE,CAAC;AACLC,MAAAA,IAAI,EAAElB;AADD,KAAD;AA5BkB,GAA9B;AAkCAC,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,cAAnB,EAvEc,CAwEd;;AAEA,sBAAO;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACH;AAAK,IAAA,EAAE,EAAC,WAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADG,CAAP;AAGH;;AAGD,eAAeV,MAAf","sourcesContent":["import React, {useEffect} from 'react';  \nimport Highcharts from 'highcharts';\nimport './result.scss';\nimport { useQuestions } from '../questionsComponent/questions';\n\nfunction Result() {\n\n    const { votes } = useQuestions();\n\n    \n\n    const count = {};\n    votes.forEach(function(i) { count[i] = (count[i]||0) + 1;});\n    \n    let xAxis = Object.keys(count),\n        yAxis = Object.values(count),\n        seperatedVotes = [yAxis]\n\n    console.log(Object.keys(count),Object.values(count))\n\n        \n    // const config = {\n    //     chart: {\n    //         type: 'column',\n    //         width: 500,\n    //         height:500\n    //     },\n    //     title: {\n    //         text: 'Vote Results'\n    //     },\n    //     xAxis: {\n    //         categories: xAxis\n    //     },\n    //     legend:{\n    //         enabled:false\n    //     },\n    //     series: seperatedVotes\n    // };\n\n    useEffect(() => {\n        \n    });\n    Highcharts.chart('container', {\n        chart: {\n            type: 'column',\n            width: 500,\n            height: 500,\n        },\n        title: {\n            text: 'Monthly Average Rainfall'\n        },\n        subtitle: {\n            text: 'Source: WorldClimate.com'\n        },\n        xAxis: {\n            categories: xAxis,\n            crosshair: true\n        },\n        yAxis: {\n            min: 0,\n            title: {\n                text: 'Rainfall (mm)'\n            }\n        },\n        plotOptions: {\n            column: {\n                pointPadding: 0.2,\n                borderWidth: 0\n            }\n        },\n        series: [{\n            data: seperatedVotes\n    \n        }]\n    });\n\n    console.log('asd', seperatedVotes)\n    //console.log(config)\n\n    return <div className=\"result-wrapper\">\n        <div id=\"container\"></div>\n    </div>\n}\n\n\nexport default Result;"]},"metadata":{},"sourceType":"module"}