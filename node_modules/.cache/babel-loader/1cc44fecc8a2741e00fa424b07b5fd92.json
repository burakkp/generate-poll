{"ast":null,"code":"var _jsxFileName = \"/home/burakkp/Documents/Projects/assessments/capgemini/fe-assignment/src/components/resultComponent/result.js\";\nimport React, { useEffect } from 'react';\nimport Highcharts from 'highcharts';\nimport './result.scss';\nimport { useQuestions } from '../questionsComponent/questions';\n\nfunction Result() {\n  const {\n    votes\n  } = useQuestions();\n  const count = {};\n  votes.forEach(function (i) {\n    count[i] = (count[i] || 0) + 1;\n  });\n  let xAxis = {\n    data: Object.keys(count)\n  },\n      yAxis = Object.values(count),\n      seperatedVotes = [yAxis];\n  console.log(Object.keys(count), Object.values(count));\n  useEffect(() => {\n    Highcharts.chart('container', {\n      chart: {\n        type: 'column',\n        width: 500,\n        height: 500\n      },\n      title: {\n        text: 'Monthly Average Rainfall'\n      },\n      subtitle: {\n        text: 'Source: WorldClimate.com'\n      },\n      xAxis: {\n        categories: xAxis\n      },\n      yAxis: {\n        min: 0,\n        title: {\n          text: 'Rainfall (mm)'\n        }\n      },\n      legend: {\n        enabled: false\n      },\n      plotOptions: {\n        column: {\n          pointPadding: 0.2,\n          borderWidth: 0\n        }\n      },\n      series: [{\n        data: seperatedVotes\n      }]\n    });\n  });\n  console.log('asd', seperatedVotes); //console.log(config)\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"result-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default Result;","map":{"version":3,"sources":["/home/burakkp/Documents/Projects/assessments/capgemini/fe-assignment/src/components/resultComponent/result.js"],"names":["React","useEffect","Highcharts","useQuestions","Result","votes","count","forEach","i","xAxis","data","Object","keys","yAxis","values","seperatedVotes","console","log","chart","type","width","height","title","text","subtitle","categories","min","legend","enabled","plotOptions","column","pointPadding","borderWidth","series"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAO,eAAP;AACA,SAASC,YAAT,QAA6B,iCAA7B;;AAEA,SAASC,MAAT,GAAkB;AAEd,QAAM;AAAEC,IAAAA;AAAF,MAAYF,YAAY,EAA9B;AAIA,QAAMG,KAAK,GAAG,EAAd;AACAD,EAAAA,KAAK,CAACE,OAAN,CAAc,UAASC,CAAT,EAAY;AAAEF,IAAAA,KAAK,CAACE,CAAD,CAAL,GAAW,CAACF,KAAK,CAACE,CAAD,CAAL,IAAU,CAAX,IAAgB,CAA3B;AAA8B,GAA1D;AAEA,MAAIC,KAAK,GAAG;AAACC,IAAAA,IAAI,EAAEC,MAAM,CAACC,IAAP,CAAYN,KAAZ;AAAP,GAAZ;AAAA,MACIO,KAAK,GAAGF,MAAM,CAACG,MAAP,CAAcR,KAAd,CADZ;AAAA,MAEIS,cAAc,GAAG,CAACF,KAAD,CAFrB;AAIAG,EAAAA,OAAO,CAACC,GAAR,CAAYN,MAAM,CAACC,IAAP,CAAYN,KAAZ,CAAZ,EAA+BK,MAAM,CAACG,MAAP,CAAcR,KAAd,CAA/B;AAGAL,EAAAA,SAAS,CAAC,MAAM;AACZC,IAAAA,UAAU,CAACgB,KAAX,CAAiB,WAAjB,EAA8B;AAC1BA,MAAAA,KAAK,EAAE;AACHC,QAAAA,IAAI,EAAE,QADH;AAEHC,QAAAA,KAAK,EAAE,GAFJ;AAGHC,QAAAA,MAAM,EAAE;AAHL,OADmB;AAM1BC,MAAAA,KAAK,EAAE;AACHC,QAAAA,IAAI,EAAE;AADH,OANmB;AAS1BC,MAAAA,QAAQ,EAAE;AACND,QAAAA,IAAI,EAAE;AADA,OATgB;AAY1Bd,MAAAA,KAAK,EAAE;AACHgB,QAAAA,UAAU,EAAEhB;AADT,OAZmB;AAe1BI,MAAAA,KAAK,EAAE;AACHa,QAAAA,GAAG,EAAE,CADF;AAEHJ,QAAAA,KAAK,EAAE;AACHC,UAAAA,IAAI,EAAE;AADH;AAFJ,OAfmB;AAqB1BI,MAAAA,MAAM,EAAE;AACJC,QAAAA,OAAO,EAAE;AADL,OArBkB;AAwB1BC,MAAAA,WAAW,EAAE;AACTC,QAAAA,MAAM,EAAE;AACJC,UAAAA,YAAY,EAAE,GADV;AAEJC,UAAAA,WAAW,EAAE;AAFT;AADC,OAxBa;AA8B1BC,MAAAA,MAAM,EAAE,CAAC;AACLvB,QAAAA,IAAI,EAAEK;AADD,OAAD;AA9BkB,KAA9B;AAmCH,GApCQ,CAAT;AAsCAC,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,cAAnB,EAtDc,CAuDd;;AAEA,sBAAO;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACH;AAAK,IAAA,EAAE,EAAC,WAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADG,CAAP;AAGH;;AAGD,eAAeX,MAAf","sourcesContent":["import React, {useEffect} from 'react';  \nimport Highcharts from 'highcharts';\nimport './result.scss';\nimport { useQuestions } from '../questionsComponent/questions';\n\nfunction Result() {\n\n    const { votes } = useQuestions();\n\n    \n\n    const count = {};\n    votes.forEach(function(i) { count[i] = (count[i]||0) + 1;});\n    \n    let xAxis = {data: Object.keys(count)},\n        yAxis = Object.values(count),\n        seperatedVotes = [yAxis]\n\n    console.log(Object.keys(count),Object.values(count))\n\n        \n    useEffect(() => {\n        Highcharts.chart('container', {\n            chart: {\n                type: 'column',\n                width: 500,\n                height: 500,\n            },\n            title: {\n                text: 'Monthly Average Rainfall'\n            },\n            subtitle: {\n                text: 'Source: WorldClimate.com'\n            },\n            xAxis: {\n                categories: xAxis\n            },\n            yAxis: {\n                min: 0,\n                title: {\n                    text: 'Rainfall (mm)'\n                }\n            },\n            legend: {\n                enabled: false\n            },\n            plotOptions: {\n                column: {\n                    pointPadding: 0.2,\n                    borderWidth: 0\n                }\n            },\n            series: [{\n                data: seperatedVotes\n        \n            }]\n        });\n    })\n\n    console.log('asd', seperatedVotes)\n    //console.log(config)\n\n    return <div className=\"result-wrapper\">\n        <div id=\"container\"></div>\n    </div>\n}\n\n\nexport default Result;"]},"metadata":{},"sourceType":"module"}