{"ast":null,"code":"var _jsxFileName = \"/home/burakkp/Documents/Projects/assessments/capgemini/fe-assignment/src/components/resultComponent/result.js\";\nimport React, { useEffect } from 'react';\nimport Highcharts from 'highcharts';\nimport './result.scss';\nimport { useQuestions } from '../questionsComponent/questions';\n\nfunction Result() {\n  const {\n    votes,\n    qTitle\n  } = useQuestions();\n  const count = {};\n  votes.forEach(function (i) {\n    count[i] = (count[i] || 0) + 1;\n  });\n  let xAxis = Object.keys(count),\n      yAxis = Object.values(count),\n      seperatedVotes = [...yAxis];\n  console.log(Object.values(count));\n  let totalVotes = Object.values(count).reduce((acc, num) => {\n    acc += num;\n    return acc;\n  }, 0);\n  useEffect(() => {\n    Highcharts.chart('container', {\n      chart: {\n        type: 'column',\n        width: 500,\n        height: 500\n      },\n      title: {\n        text: ''\n      },\n      xAxis: {\n        title: {\n          text: 'Question Options'\n        },\n        categories: xAxis\n      },\n      yAxis: {\n        title: {\n          text: 'Votes'\n        },\n        tickInterval: 1\n      },\n      legend: {\n        enabled: false\n      },\n      plotOptions: {\n        column: {\n          pointPadding: 0.2,\n          borderWidth: 0\n        },\n        series: {\n          borderWidth: 0,\n          dataLabels: {\n            enabled: true,\n            format: '{point.y}'\n          }\n        }\n      },\n      credits: {\n        enabled: false\n      },\n      series: [{\n        data: seperatedVotes\n      }]\n    });\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"result-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"chart-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, qTitle), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"totalVotes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, \"Total votes: \", totalVotes));\n}\n\nexport default Result;","map":{"version":3,"sources":["/home/burakkp/Documents/Projects/assessments/capgemini/fe-assignment/src/components/resultComponent/result.js"],"names":["React","useEffect","Highcharts","useQuestions","Result","votes","qTitle","count","forEach","i","xAxis","Object","keys","yAxis","values","seperatedVotes","console","log","totalVotes","reduce","acc","num","chart","type","width","height","title","text","categories","tickInterval","legend","enabled","plotOptions","column","pointPadding","borderWidth","series","dataLabels","format","credits","data"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react';  \nimport Highcharts from 'highcharts';\nimport './result.scss';\nimport { useQuestions } from '../questionsComponent/questions';\n\nfunction Result() {\n\n    const { votes, qTitle } = useQuestions();\n    \n    const count = {};\n    votes.forEach(function(i) { count[i] = (count[i]||0) + 1;});\n    \n    let xAxis = Object.keys(count),\n        yAxis = Object.values(count),\n        seperatedVotes = [...yAxis];\n\n    \n    console.log(Object.values(count))\n    \n    let totalVotes = Object.values(count).reduce((acc, num) => {\n        acc += num\n        return acc\n      }, 0)\n\n    useEffect(() => {\n        Highcharts.chart('container', {\n            chart: {\n                type: 'column',\n                width: 500,\n                height: 500,\n            },\n            title: {\n                text: ''\n            },\n            xAxis: {\n                title: {\n                    text: 'Question Options'\n                },\n                categories: xAxis\n            },\n            yAxis: {\n                title: {\n                    text: 'Votes'\n                },\n                tickInterval: 1\n            },\n            legend: {\n                enabled: false\n            },\n            plotOptions: {\n                column: {\n                    pointPadding: 0.2,\n                    borderWidth: 0\n                },\n                series: {\n                    borderWidth: 0,\n                    dataLabels: {\n                        enabled: true,\n                        format: '{point.y}'\n                    }\n                }\n            },\n            credits:{\n                enabled: false\n            },  \n            series: [{\n                data: seperatedVotes        \n            }]\n        });\n\n        \n    });\n\n\n    return <div className=\"result-wrapper\">\n        <h3 className=\"chart-title\">{qTitle}</h3>\n        <div id=\"container\"></div>\n        <div className=\"totalVotes\">Total votes: {totalVotes}</div>\n    </div>\n}\n\n\nexport default Result;"]},"metadata":{},"sourceType":"module"}