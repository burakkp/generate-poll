{"ast":null,"code":"var _jsxFileName = \"/home/burakkp/Documents/Projects/assessments/capgemini/fe-assignment/src/components/resultComponent/result.js\";\nimport React, { useEffect } from 'react';\nimport Highcharts from 'highcharts';\nimport './result.scss';\nimport { useQuestions } from '../questionsComponent/questions';\n\nfunction Result() {\n  const {\n    votes\n  } = useQuestions();\n  const count = {};\n  votes.forEach(function (i) {\n    count[i] = (count[i] || 0) + 1;\n  });\n  let xAxis = Object.values(count),\n      yAxis = Object.keys(count),\n      seperatedVotes = [yAxis];\n  console.log(Object.keys(count), Object.values(count)); // const config = {\n  //     chart: {\n  //         type: 'column',\n  //         width: 500,\n  //         height:500\n  //     },\n  //     title: {\n  //         text: 'Vote Results'\n  //     },\n  //     xAxis: {\n  //         categories: xAxis\n  //     },\n  //     legend:{\n  //         enabled:false\n  //     },\n  //     series: seperatedVotes\n  // };\n\n  useEffect(() => {\n    Highcharts.chart('container', {\n      chart: {\n        type: 'column',\n        width: 500,\n        height: 500\n      },\n      title: {\n        text: 'Monthly Average Rainfall'\n      },\n      subtitle: {\n        text: 'Source: WorldClimate.com'\n      },\n      xAxis: {\n        categories: xAxis,\n        crosshair: true\n      },\n      yAxis: {\n        min: 0,\n        title: {\n          text: 'Rainfall (mm)'\n        }\n      },\n      plotOptions: {\n        column: {\n          pointPadding: 0.2,\n          borderWidth: 0\n        }\n      },\n      series: [{\n        name: 'Tokyo',\n        data: [49.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 95.6, 54.4]\n      }]\n    });\n  });\n  console.log('asd', seperatedVotes); //console.log(config)\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"result-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default Result;","map":{"version":3,"sources":["/home/burakkp/Documents/Projects/assessments/capgemini/fe-assignment/src/components/resultComponent/result.js"],"names":["React","useEffect","Highcharts","useQuestions","Result","votes","count","forEach","i","xAxis","Object","values","yAxis","keys","seperatedVotes","console","log","chart","type","width","height","title","text","subtitle","categories","crosshair","min","plotOptions","column","pointPadding","borderWidth","series","name","data"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAO,eAAP;AACA,SAASC,YAAT,QAA6B,iCAA7B;;AAEA,SAASC,MAAT,GAAkB;AAEd,QAAM;AAAEC,IAAAA;AAAF,MAAYF,YAAY,EAA9B;AAIA,QAAMG,KAAK,GAAG,EAAd;AACAD,EAAAA,KAAK,CAACE,OAAN,CAAc,UAASC,CAAT,EAAY;AAAEF,IAAAA,KAAK,CAACE,CAAD,CAAL,GAAW,CAACF,KAAK,CAACE,CAAD,CAAL,IAAU,CAAX,IAAgB,CAA3B;AAA8B,GAA1D;AAEA,MAAIC,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAcL,KAAd,CAAZ;AAAA,MACIM,KAAK,GAAGF,MAAM,CAACG,IAAP,CAAYP,KAAZ,CADZ;AAAA,MAEIQ,cAAc,GAAG,CAACF,KAAD,CAFrB;AAIAG,EAAAA,OAAO,CAACC,GAAR,CAAYN,MAAM,CAACG,IAAP,CAAYP,KAAZ,CAAZ,EAA+BI,MAAM,CAACC,MAAP,CAAcL,KAAd,CAA/B,EAbc,CAgBd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACZC,IAAAA,UAAU,CAACe,KAAX,CAAiB,WAAjB,EAA8B;AAC1BA,MAAAA,KAAK,EAAE;AACHC,QAAAA,IAAI,EAAE,QADH;AAEHC,QAAAA,KAAK,EAAE,GAFJ;AAGHC,QAAAA,MAAM,EAAE;AAHL,OADmB;AAM1BC,MAAAA,KAAK,EAAE;AACHC,QAAAA,IAAI,EAAE;AADH,OANmB;AAS1BC,MAAAA,QAAQ,EAAE;AACND,QAAAA,IAAI,EAAE;AADA,OATgB;AAY1Bb,MAAAA,KAAK,EAAE;AACHe,QAAAA,UAAU,EAAEf,KADT;AAEHgB,QAAAA,SAAS,EAAE;AAFR,OAZmB;AAgB1Bb,MAAAA,KAAK,EAAE;AACHc,QAAAA,GAAG,EAAE,CADF;AAEHL,QAAAA,KAAK,EAAE;AACHC,UAAAA,IAAI,EAAE;AADH;AAFJ,OAhBmB;AAsB1BK,MAAAA,WAAW,EAAE;AACTC,QAAAA,MAAM,EAAE;AACJC,UAAAA,YAAY,EAAE,GADV;AAEJC,UAAAA,WAAW,EAAE;AAFT;AADC,OAtBa;AA4B1BC,MAAAA,MAAM,EAAE,CAAC;AACLC,QAAAA,IAAI,EAAE,OADD;AAELC,QAAAA,IAAI,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,KAAb,EAAoB,KAApB,EAA2B,KAA3B,EAAkC,KAAlC,EAAyC,KAAzC,EAAgD,KAAhD,EAAuD,KAAvD,EAA8D,KAA9D,EAAqE,IAArE,EAA2E,IAA3E;AAFD,OAAD;AA5BkB,KAA9B;AAkCH,GAnCQ,CAAT;AAqCAlB,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,cAAnB,EAvEc,CAwEd;;AAEA,sBAAO;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACH;AAAK,IAAA,EAAE,EAAC,WAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADG,CAAP;AAGH;;AAGD,eAAeV,MAAf","sourcesContent":["import React, {useEffect} from 'react';  \nimport Highcharts from 'highcharts';\nimport './result.scss';\nimport { useQuestions } from '../questionsComponent/questions';\n\nfunction Result() {\n\n    const { votes } = useQuestions();\n\n    \n\n    const count = {};\n    votes.forEach(function(i) { count[i] = (count[i]||0) + 1;});\n    \n    let xAxis = Object.values(count),\n        yAxis = Object.keys(count),\n        seperatedVotes = [yAxis]\n\n    console.log(Object.keys(count),Object.values(count))\n\n        \n    // const config = {\n    //     chart: {\n    //         type: 'column',\n    //         width: 500,\n    //         height:500\n    //     },\n    //     title: {\n    //         text: 'Vote Results'\n    //     },\n    //     xAxis: {\n    //         categories: xAxis\n    //     },\n    //     legend:{\n    //         enabled:false\n    //     },\n    //     series: seperatedVotes\n    // };\n\n    useEffect(() => {\n        Highcharts.chart('container', {\n            chart: {\n                type: 'column',\n                width: 500,\n                height: 500,\n            },\n            title: {\n                text: 'Monthly Average Rainfall'\n            },\n            subtitle: {\n                text: 'Source: WorldClimate.com'\n            },\n            xAxis: {\n                categories: xAxis,\n                crosshair: true\n            },\n            yAxis: {\n                min: 0,\n                title: {\n                    text: 'Rainfall (mm)'\n                }\n            },\n            plotOptions: {\n                column: {\n                    pointPadding: 0.2,\n                    borderWidth: 0\n                }\n            },\n            series: [{\n                name: 'Tokyo',\n                data: [49.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 95.6, 54.4]\n        \n            }]\n        });\n    })\n\n    console.log('asd', seperatedVotes)\n    //console.log(config)\n\n    return <div className=\"result-wrapper\">\n        <div id=\"container\"></div>\n    </div>\n}\n\n\nexport default Result;"]},"metadata":{},"sourceType":"module"}