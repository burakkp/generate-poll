{"ast":null,"code":"var _jsxFileName = \"/home/burakkp/Documents/Projects/assessments/capgemini/fe-assignment/src/components/questionsComponent/questions.js\";\nimport React, { createContext, useState, useContext } from 'react';\nimport './questions.scss';\nconst QuestionContext = createContext();\nexport const useQuestions = () => useContext(QuestionContext);\nexport default function QuestionProvider({\n  children\n}) {\n  const [questions, setQuestions] = useState([]);\n  const [qTitle, setQTitle] = useState('');\n\n  const addQuestionTitle = qTitle => setQTitle([...qTitle]);\n\n  const addQuestion = (id, question) => setQuestions([...questions, {\n    id,\n    question\n  }]);\n\n  const removeQuestion = (id, question) => {\n    console.log(id, question);\n    let removed = questions.filter(questionArr => {\n      if (questionArr.question !== question) return questionArr;\n    });\n    setQuestions(removed);\n  };\n\n  let updateQuestionIndex;\n\n  const updateQuestions = (id, question) => {\n    questions.filter(questionArr => {\n      updateQuestionIndex = questions.findIndex(o => o.question === questionArr.question);\n      questions[updateQuestionIndex] = {\n        question: questionArr.question\n      };\n      console.log(updateQuestionIndex, questionArr.question);\n    });\n  };\n\n  const resetQuestionList = () => {\n    setQuestions([]);\n  };\n\n  return /*#__PURE__*/React.createElement(QuestionContext.Provider, {\n    value: {\n      questions,\n      qTitle,\n      addQuestionTitle,\n      addQuestion,\n      removeQuestion,\n      updateQuestions\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, children, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, questions.length, \" / 10 possible answers\"), \" \", /*#__PURE__*/React.createElement(\"button\", {\n    onClick: resetQuestionList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 65\n    }\n  }, \"Reset\"));\n}","map":{"version":3,"sources":["/home/burakkp/Documents/Projects/assessments/capgemini/fe-assignment/src/components/questionsComponent/questions.js"],"names":["React","createContext","useState","useContext","QuestionContext","useQuestions","QuestionProvider","children","questions","setQuestions","qTitle","setQTitle","addQuestionTitle","addQuestion","id","question","removeQuestion","console","log","removed","filter","questionArr","updateQuestionIndex","updateQuestions","findIndex","o","resetQuestionList","length"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,aAAf,EAA8BC,QAA9B,EAAwCC,UAAxC,QAAyD,OAAzD;AACA,OAAO,kBAAP;AAEA,MAAMC,eAAe,GAAGH,aAAa,EAArC;AACA,OAAO,MAAMI,YAAY,GAAG,MAAMF,UAAU,CAACC,eAAD,CAArC;AAEP,eAAe,SAASE,gBAAT,CAA0B;AAAEC,EAAAA;AAAF,CAA1B,EAAwC;AAEnD,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC;;AAEA,QAAMU,gBAAgB,GAAGF,MAAM,IAC3BC,SAAS,CAAC,CACN,GAAGD,MADG,CAAD,CADb;;AAKA,QAAMG,WAAW,GAAG,CAACC,EAAD,EAAKC,QAAL,KAElBN,YAAY,CAAC,CACT,GAAGD,SADM,EAET;AACIM,IAAAA,EADJ;AAEIC,IAAAA;AAFJ,GAFS,CAAD,CAFd;;AAUA,QAAMC,cAAc,GAAG,CAACF,EAAD,EAAKC,QAAL,KAAkB;AACrCE,IAAAA,OAAO,CAACC,GAAR,CAAYJ,EAAZ,EAAgBC,QAAhB;AACA,QAAII,OAAO,GAAGX,SAAS,CAACY,MAAV,CAAkBC,WAAD,IAAiB;AAExC,UAAGA,WAAW,CAACN,QAAZ,KAAyBA,QAA5B,EAAsC,OAAOM,WAAP;AAEzC,KAJS,CAAd;AAMIZ,IAAAA,YAAY,CAACU,OAAD,CAAZ;AAEP,GAVD;;AAYA,MAAIG,mBAAJ;;AACA,QAAMC,eAAe,GAAG,CAACT,EAAD,EAAKC,QAAL,KAAkB;AACtCP,IAAAA,SAAS,CAACY,MAAV,CAAkBC,WAAD,IAAiB;AAE9BC,MAAAA,mBAAmB,GAAGd,SAAS,CAACgB,SAAV,CAAoBC,CAAC,IAAIA,CAAC,CAACV,QAAF,KAAeM,WAAW,CAACN,QAApD,CAAtB;AAEAP,MAAAA,SAAS,CAACc,mBAAD,CAAT,GAAiC;AAACP,QAAAA,QAAQ,EAAEM,WAAW,CAACN;AAAvB,OAAjC;AAEAE,MAAAA,OAAO,CAACC,GAAR,CAAYI,mBAAZ,EAAiCD,WAAW,CAACN,QAA7C;AACH,KAPD;AAUH,GAXD;;AAaA,QAAMW,iBAAiB,GAAG,MAAK;AAC3BjB,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACH,GAFD;;AAIF,sBACI,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAE;AAAED,MAAAA,SAAF;AAAaE,MAAAA,MAAb;AAAqBE,MAAAA,gBAArB;AAAuCC,MAAAA,WAAvC;AAAoDG,MAAAA,cAApD;AAAoEO,MAAAA;AAApE,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACMhB,QADN,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOC,SAAS,CAACmB,MAAjB,2BAFJ,oBAE0D;AAAQ,IAAA,OAAO,EAAED,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAF1D,CADJ;AAMD","sourcesContent":["import React, {createContext, useState, useContext} from 'react'\nimport './questions.scss';\n\nconst QuestionContext = createContext()\nexport const useQuestions = () => useContext(QuestionContext)\n\nexport default function QuestionProvider({ children }) {\n\n    const [questions, setQuestions] = useState([]);\n    const [qTitle, setQTitle] = useState('');\n  \n    const addQuestionTitle = qTitle =>\n        setQTitle([\n            ...qTitle\n        ]);\n\n    const addQuestion = (id, question) =>\n\n      setQuestions([\n          ...questions,\n          { \n              id,\n              question\n          }\n      ])\n\n    const removeQuestion = (id, question) => {\n        console.log(id, question)\n        let removed = questions.filter((questionArr) => {\n                \n                if(questionArr.question !== question) return questionArr;\n\n            });\n            \n            setQuestions(removed);\n            \n    };\n\n    let updateQuestionIndex;\n    const updateQuestions = (id, question) => {\n        questions.filter((questionArr) => {\n            \n            updateQuestionIndex = questions.findIndex(o => o.question === questionArr.question);\n\n            questions[updateQuestionIndex] = {question: questionArr.question};\n\n            console.log(updateQuestionIndex, questionArr.question)\n        })\n        \n        \n    }\n  \n    const resetQuestionList = () =>{\n        setQuestions([])\n    }\n  \n  return (\n      <QuestionContext.Provider value={{ questions, qTitle, addQuestionTitle, addQuestion, removeQuestion, updateQuestions }}>\n          { children }\n          <span>{questions.length} / 10 possible answers</span> <button onClick={resetQuestionList}>Reset</button>\n      </QuestionContext.Provider>\n  )\n}"]},"metadata":{},"sourceType":"module"}