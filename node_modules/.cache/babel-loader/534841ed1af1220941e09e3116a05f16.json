{"ast":null,"code":"var _jsxFileName = \"/home/burakkp/Documents/Projects/assessments/capgemini/fe-assignment/src/components/questionsComponent/question.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useQuestions } from './questions';\nexport default function Question({\n  id,\n  question\n}) {\n  const [change, setChange] = useState([]);\n  const {\n    questions,\n    addQuestion,\n    removeQuestion,\n    updateQuestions\n  } = useQuestions();\n\n  const remove = e => {\n    e.preventDefault();\n    removeQuestion(id, question);\n  };\n\n  let changedInput = [];\n\n  const handleChange = e => {\n    e.preventDefault();\n    changedInput.push({\n      id,\n      question: e.target.value\n    });\n    setChange(changedInput); //updateQuestions(id,e.target.value);\n\n    questions.filter(questionArr => {\n      if (questionArr.id === id) {\n        addQuestion(changedInput);\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"question\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: question,\n    id: id,\n    maxLength: \"80\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 40\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: remove,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 138\n    }\n  }, \" x\")));\n}","map":{"version":3,"sources":["/home/burakkp/Documents/Projects/assessments/capgemini/fe-assignment/src/components/questionsComponent/question.js"],"names":["React","useEffect","useState","useQuestions","Question","id","question","change","setChange","questions","addQuestion","removeQuestion","updateQuestions","remove","e","preventDefault","changedInput","handleChange","push","target","value","filter","questionArr"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,YAAT,QAA6B,aAA7B;AAEA,eAAe,SAASC,QAAT,CAAkB;AAAEC,EAAAA,EAAF;AAAMC,EAAAA;AAAN,CAAlB,EAAoC;AAEjD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAEO,IAAAA,SAAF;AAAaC,IAAAA,WAAb;AAA0BC,IAAAA,cAA1B;AAA0CC,IAAAA;AAA1C,MAA8DT,YAAY,EAAhF;;AAIA,QAAMU,MAAM,GAAGC,CAAC,IAAI;AAClBA,IAAAA,CAAC,CAACC,cAAF;AAEAJ,IAAAA,cAAc,CAACN,EAAD,EAAIC,QAAJ,CAAd;AACD,GAJD;;AAMA,MAAIU,YAAY,GAAG,EAAnB;;AAEA,QAAMC,YAAY,GAAGH,CAAC,IAAI;AACxBA,IAAAA,CAAC,CAACC,cAAF;AAEAC,IAAAA,YAAY,CAACE,IAAb,CAAkB;AAChBb,MAAAA,EADgB;AAEhBC,MAAAA,QAAQ,EAACQ,CAAC,CAACK,MAAF,CAASC;AAFF,KAAlB;AAKAZ,IAAAA,SAAS,CAACQ,YAAD,CAAT,CARwB,CASxB;;AAEAP,IAAAA,SAAS,CAACY,MAAV,CAAkBC,WAAD,IAAiB;AAEhC,UAAGA,WAAW,CAACjB,EAAZ,KAAmBA,EAAtB,EAAyB;AAErBK,QAAAA,WAAW,CAACM,YAAD,CAAX;AAEH;AAEF,KARD;AAUA,GArBF;;AAuBA,sBACE,uDAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAI;AAAM,IAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA2B;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,WAAW,EAAEV,QAAhC;AAA0C,IAAA,EAAE,EAAED,EAA9C;AAAkD,IAAA,SAAS,EAAC,IAA5D;AAAiE,IAAA,QAAQ,EAAEY,YAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA3B,CAAJ,eAAiI;AAAQ,IAAA,OAAO,EAAEJ,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAjI,CAFJ,CADF;AAOD","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useQuestions } from './questions';\n\nexport default function Question({ id, question }) {\n  \n  const [change, setChange] = useState([]);\n  const { questions, addQuestion, removeQuestion, updateQuestions } = useQuestions();\n\n  \n\n  const remove = e => {\n    e.preventDefault();\n    \n    removeQuestion(id,question);\n  }\n\n  let changedInput = [];\n\n  const handleChange = e => {\n    e.preventDefault(); \n\n    changedInput.push({\n      id,\n      question:e.target.value\n    })\n    \n    setChange(changedInput);\n    //updateQuestions(id,e.target.value);\n\n    questions.filter((questionArr) => {\n            \n      if(questionArr.id === id){\n          \n          addQuestion(changedInput);\n\n      }\n\n    })\n\n   }\n\n  return (\n    <>\n    \n        <li><span className=\"question\"><input type=\"text\" placeholder={question} id={id} maxLength=\"80\" onChange={handleChange} /></span><button onClick={remove}> x</button></li>\n      \n    </>\n  )\n}"]},"metadata":{},"sourceType":"module"}