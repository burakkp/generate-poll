{"ast":null,"code":"var _jsxFileName = \"/home/burakkp/Documents/Projects/assessments/capgemini/fe-assignment/src/components/questionsComponent/questions.js\";\nimport React, { createContext, useState, useContext } from 'react';\nimport './questions.scss';\nconst QuestionContext = createContext();\nexport const useQuestions = () => useContext(QuestionContext);\nexport default function QuestionProvider({\n  children\n}) {\n  const [questions, setQuestions] = useState([]);\n  const [qTitle, setQTitle] = useState('');\n  const [votes, setVote] = useState([]);\n\n  const addQuestionTitle = qTitle => setQTitle([...qTitle]);\n\n  const addQuestion = (id, question) => setQuestions([...questions, {\n    id,\n    question\n  }]);\n\n  const removeQuestion = (id, question) => {\n    let removed = questions.filter(questionArr => {\n      if (questionArr.id !== id) return questionArr;\n    });\n    setQuestions(removed);\n  };\n\n  const updateQuestions = (id, change) => {\n    if (change.length > 0) {\n      questions.filter(questionArr => {\n        if (questionArr.id === id) {\n          questions[id].question = change;\n        }\n      });\n    }\n  };\n\n  const resetQuestionList = () => {\n    setQuestions([]);\n  };\n\n  const submitVote = vote => {\n    console.log(vote);\n    setVote([...votes, vote]);\n    console.log(votes);\n  };\n\n  return /*#__PURE__*/React.createElement(QuestionContext.Provider, {\n    value: {\n      votes,\n      questions,\n      qTitle,\n      addQuestionTitle,\n      addQuestion,\n      removeQuestion,\n      updateQuestions,\n      resetQuestionList,\n      submitVote\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, children);\n}","map":{"version":3,"sources":["/home/burakkp/Documents/Projects/assessments/capgemini/fe-assignment/src/components/questionsComponent/questions.js"],"names":["React","createContext","useState","useContext","QuestionContext","useQuestions","QuestionProvider","children","questions","setQuestions","qTitle","setQTitle","votes","setVote","addQuestionTitle","addQuestion","id","question","removeQuestion","removed","filter","questionArr","updateQuestions","change","length","resetQuestionList","submitVote","vote","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,aAAf,EAA8BC,QAA9B,EAAwCC,UAAxC,QAAyD,OAAzD;AACA,OAAO,kBAAP;AAEA,MAAMC,eAAe,GAAGH,aAAa,EAArC;AACA,OAAO,MAAMI,YAAY,GAAG,MAAMF,UAAU,CAACC,eAAD,CAArC;AAEP,eAAe,SAASE,gBAAT,CAA0B;AAAEC,EAAAA;AAAF,CAA1B,EAAwC;AAEnD,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACU,KAAD,EAAQC,OAAR,IAAmBX,QAAQ,CAAC,EAAD,CAAjC;;AAEA,QAAMY,gBAAgB,GAAGJ,MAAM,IAC3BC,SAAS,CAAC,CACN,GAAGD,MADG,CAAD,CADb;;AAKA,QAAMK,WAAW,GAAG,CAACC,EAAD,EAAKC,QAAL,KAElBR,YAAY,CAAC,CACT,GAAGD,SADM,EAET;AACIQ,IAAAA,EADJ;AAEIC,IAAAA;AAFJ,GAFS,CAAD,CAFd;;AAUA,QAAMC,cAAc,GAAG,CAACF,EAAD,EAAKC,QAAL,KAAkB;AAErC,QAAIE,OAAO,GAAGX,SAAS,CAACY,MAAV,CAAkBC,WAAD,IAAiB;AAExC,UAAGA,WAAW,CAACL,EAAZ,KAAmBA,EAAtB,EAA0B,OAAOK,WAAP;AAE7B,KAJS,CAAd;AAMIZ,IAAAA,YAAY,CAACU,OAAD,CAAZ;AAEP,GAVD;;AAaA,QAAMG,eAAe,GAAG,CAACN,EAAD,EAAKO,MAAL,KAAgB;AAGpC,QAAGA,MAAM,CAACC,MAAP,GAAgB,CAAnB,EAAqB;AACjBhB,MAAAA,SAAS,CAACY,MAAV,CAAkBC,WAAD,IAAiB;AAE9B,YAAGA,WAAW,CAACL,EAAZ,KAAmBA,EAAtB,EAAyB;AAErBR,UAAAA,SAAS,CAACQ,EAAD,CAAT,CAAcC,QAAd,GAAyBM,MAAzB;AAEH;AAEJ,OARD;AASH;AAGJ,GAhBD;;AAkBA,QAAME,iBAAiB,GAAG,MAAK;AAC3BhB,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACH,GAFD;;AAIA,QAAMiB,UAAU,GAAIC,IAAD,IAAU;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAd,IAAAA,OAAO,CAAC,CACJ,GAAGD,KADC,EAEJe,IAFI,CAAD,CAAP;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAYjB,KAAZ;AACH,GAPD;;AASF,sBACI,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAE;AAAEA,MAAAA,KAAF;AAASJ,MAAAA,SAAT;AAAoBE,MAAAA,MAApB;AAA4BI,MAAAA,gBAA5B;AAA8CC,MAAAA,WAA9C;AAA2DG,MAAAA,cAA3D;AAA2EI,MAAAA,eAA3E;AAA4FG,MAAAA,iBAA5F;AAA+GC,MAAAA;AAA/G,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACMnB,QADN,CADJ;AAKD","sourcesContent":["import React, {createContext, useState, useContext} from 'react'\nimport './questions.scss';\n\nconst QuestionContext = createContext()\nexport const useQuestions = () => useContext(QuestionContext)\n\nexport default function QuestionProvider({ children }) {\n\n    const [questions, setQuestions] = useState([]);\n    const [qTitle, setQTitle] = useState('');\n    const [votes, setVote] = useState([]);\n  \n    const addQuestionTitle = qTitle =>\n        setQTitle([\n            ...qTitle\n        ]);\n        \n    const addQuestion = (id, question) =>\n\n      setQuestions([\n          ...questions,\n          { \n              id,\n              question\n          }\n      ])\n\n    const removeQuestion = (id, question) => {\n        \n        let removed = questions.filter((questionArr) => {\n                \n                if(questionArr.id !== id) return questionArr;\n\n            });\n            \n            setQuestions(removed);\n            \n    };\n\n    \n    const updateQuestions = (id, change) => {\n        \n           \n        if(change.length > 0){\n            questions.filter((questionArr) => {\n            \n                if(questionArr.id === id){\n                    \n                    questions[id].question = change;\n\n                }\n    \n            })\n        }\n        \n        \n    }\n  \n    const resetQuestionList = () =>{\n        setQuestions([])\n    }\n    \n    const submitVote = (vote) => {\n        console.log(vote)\n        setVote([\n            ...votes,\n            vote\n        ])    \n        console.log(votes)\n    }\n    \n  return (\n      <QuestionContext.Provider value={{ votes, questions, qTitle, addQuestionTitle, addQuestion, removeQuestion, updateQuestions, resetQuestionList, submitVote }}>\n          { children }\n      </QuestionContext.Provider>\n  )\n}"]},"metadata":{},"sourceType":"module"}