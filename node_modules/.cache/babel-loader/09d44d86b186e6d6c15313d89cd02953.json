{"ast":null,"code":"var _jsxFileName = \"/home/burakkp/Documents/Projects/assessments/capgemini/fe-assignment/src/components/questionsComponent/questions.js\";\n// import React, { useState, useRef, useReducer } from 'react';\nimport './questions.scss'; // function Questions(){\n//     const initialState = '';\n//     const reducer = (state, action) => action;\n//     const [questionText, changeQuestionText] = useReducer(reducer, initialState);\n//     const [optionsText, changeOptionsText] = useReducer(reducer, initialState);\n//     const [voteQuestion, setVoteQuestion] = useState(null);\n//     const [voteOptions, setVoteOptions] = useState([]);\n//     const questionRef = useRef(null);\n//     const optionsRef = useRef(null);\n//     function addOption(){\n//         setVoteOptions(optionsText) \n//     }\n//     return <div className=\"questions-wrapper\">\n//         <QuestionInput type=\"text\" placeholder=\"What is the value of π?\" value={questionText} onChangeText={changeQuestionText} />\n//         <div className=\"options-wrapper\">\n//             <OptionsInput type=\"text\" placeholder=\"Type an answer\" value={optionsText} onChangeText={changeOptionsText} />\n//             <div className=\"addOption\" onClick={addOption}>Add</div>\n//         </div>\n//         <div className=\"options-list\">\n//             {voteOptions}\n//         </div>\n//     </div>\n// }\n// const QuestionInput = ({ value, onChangeText }) => (\n//     <input type=\"text\" value={value} placeholder=\"What is the value of π?\" maxLength=\"80\" onChange={e => onChangeText(e.target.value)} />\n//   );\n// const OptionsInput = ({value, onChangeText}) => (\n//     <input type=\"text\" value={value} placeholder=\"Type an answer\" maxLength=\"80\" onChange={e => onChangeText(e.target.value)} />\n// );\n// export default Questions;\n\nimport React, { createContext, useState, useContext } from 'react';\nconst QuestionContext = createContext();\nexport const useQuestions = () => useContext(QuestionContext);\nexport default function QuestionProvider({\n  children\n}) {\n  // 3\n  const [questions, setQuestions] = useState([]); // 4\n\n  const addQuestion = question => setQuestion([...questions, {\n    id: 1,\n    question,\n    complete: false\n  }]); // 5\n\n\n  const setStatusQuestion = (id, status) => {\n    setQuestions(questions.map(t => t.id === id ? { ...t,\n      complete: status\n    } : t));\n  }; // 6\n\n\n  return /*#__PURE__*/React.createElement(QuestionContext.Provider, {\n    value: {\n      questions,\n      addQuestion,\n      setQuestion\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, children);\n}","map":{"version":3,"sources":["/home/burakkp/Documents/Projects/assessments/capgemini/fe-assignment/src/components/questionsComponent/questions.js"],"names":["React","createContext","useState","useContext","QuestionContext","useQuestions","QuestionProvider","children","questions","setQuestions","addQuestion","question","setQuestion","id","complete","setStatusQuestion","status","map","t"],"mappings":";AAAA;AACA,OAAO,kBAAP,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAIA,OAAOA,KAAP,IAAeC,aAAf,EAA8BC,QAA9B,EAAwCC,UAAxC,QAAyD,OAAzD;AAEA,MAAMC,eAAe,GAAGH,aAAa,EAArC;AACA,OAAO,MAAMI,YAAY,GAAG,MAAMF,UAAU,CAACC,eAAD,CAArC;AAEP,eAAe,SAASE,gBAAT,CAA0B;AAAEC,EAAAA;AAAF,CAA1B,EAAwC;AACrD;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,EAAD,CAA1C,CAFqD,CAIrD;;AACA,QAAMQ,WAAW,GAAGC,QAAQ,IACxBC,WAAW,CAAC,CACR,GAAGJ,SADK,EAER;AACIK,IAAAA,EAAE,EAAE,CADR;AAEIF,IAAAA,QAFJ;AAGIG,IAAAA,QAAQ,EAAE;AAHd,GAFQ,CAAD,CADf,CALqD,CAerD;;;AACA,QAAMC,iBAAiB,GAAG,CAACF,EAAD,EAAKG,MAAL,KAAgB;AACtCP,IAAAA,YAAY,CAACD,SAAS,CAACS,GAAV,CAAcC,CAAC,IAAIA,CAAC,CAACL,EAAF,KAASA,EAAT,GAAc,EAAC,GAAGK,CAAJ;AAAOJ,MAAAA,QAAQ,EAAEE;AAAjB,KAAd,GAAyCE,CAA5D,CAAD,CAAZ;AACH,GAFD,CAhBqD,CAoBrD;;;AACA,sBACI,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAE;AAAEV,MAAAA,SAAF;AAAaE,MAAAA,WAAb;AAA0BE,MAAAA;AAA1B,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACML,QADN,CADJ;AAKD","sourcesContent":["// import React, { useState, useRef, useReducer } from 'react';\nimport './questions.scss';\n\n// function Questions(){\n//     const initialState = '';\n//     const reducer = (state, action) => action;\n//     const [questionText, changeQuestionText] = useReducer(reducer, initialState);\n//     const [optionsText, changeOptionsText] = useReducer(reducer, initialState);\n//     const [voteQuestion, setVoteQuestion] = useState(null);\n//     const [voteOptions, setVoteOptions] = useState([]);\n//     const questionRef = useRef(null);\n//     const optionsRef = useRef(null);\n\n\n//     function addOption(){\n//         setVoteOptions(optionsText) \n//     }\n\n//     return <div className=\"questions-wrapper\">\n//         <QuestionInput type=\"text\" placeholder=\"What is the value of π?\" value={questionText} onChangeText={changeQuestionText} />\n//         <div className=\"options-wrapper\">\n//             <OptionsInput type=\"text\" placeholder=\"Type an answer\" value={optionsText} onChangeText={changeOptionsText} />\n//             <div className=\"addOption\" onClick={addOption}>Add</div>\n//         </div>\n//         <div className=\"options-list\">\n//             {voteOptions}\n//         </div>\n//     </div>\n// }\n\n\n// const QuestionInput = ({ value, onChangeText }) => (\n//     <input type=\"text\" value={value} placeholder=\"What is the value of π?\" maxLength=\"80\" onChange={e => onChangeText(e.target.value)} />\n//   );\n\n// const OptionsInput = ({value, onChangeText}) => (\n//     <input type=\"text\" value={value} placeholder=\"Type an answer\" maxLength=\"80\" onChange={e => onChangeText(e.target.value)} />\n// );\n\n// export default Questions;\n\n\n\nimport React, {createContext, useState, useContext} from 'react'\n\nconst QuestionContext = createContext()\nexport const useQuestions = () => useContext(QuestionContext)\n\nexport default function QuestionProvider({ children }) {\n  // 3\n  const [questions, setQuestions] = useState([])\n\n  // 4\n  const addQuestion = question =>\n      setQuestion([\n          ...questions,\n          {\n              id: 1,\n              question,\n              complete: false\n          }\n      ])\n\n  // 5\n  const setStatusQuestion = (id, status) => {\n      setQuestions(questions.map(t => t.id === id ? {...t, complete: status} : t))\n  }\n\n  // 6\n  return (\n      <QuestionContext.Provider value={{ questions, addQuestion, setQuestion }}>\n          { children }\n      </QuestionContext.Provider>\n  )\n}"]},"metadata":{},"sourceType":"module"}